/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type {
  BamlRuntime,
  FunctionResult,
  BamlCtxManager,
  ClientRegistry,
  Image,
  Audio,
  Pdf,
  Video,
  FunctionLog,
  HTTPRequest,
} from '@boundaryml/baml';
import {
  toBamlError,
  BamlStream,
  BamlAbortError,
  Collector,
} from '@boundaryml/baml';
import type {
  Checked,
  Check,
  RecursivePartialNull as MovedRecursivePartialNull,
} from './types';
import type { partial_types } from './partial_types';
import type * as types from './types';
import type {
  BamlMdOutline,
  EntityExtractResult,
  Entity_Plain_Definition,
  ScopeExtractResult,
  WikiSearchParamsBaml,
} from './types';
import type TypeBuilder from './type_builder';
import { AsyncHttpRequest, AsyncHttpStreamRequest } from './async_request';
import { LlmResponseParser, LlmStreamParser } from './parser';
import {
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
} from './globals';

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type TickReason = 'Unknown';

type BamlCallOptions = {
  tb?: TypeBuilder;
  clientRegistry?: ClientRegistry;
  collector?: Collector | Collector[];
  env?: Record<string, string | undefined>;
  tags?: Record<string, string>;
  signal?: AbortSignal;
  onTick?: (reason: TickReason, log: FunctionLog | null) => void;
};

export class BamlAsyncClient {
  private runtime: BamlRuntime;
  private ctxManager: BamlCtxManager;
  private streamClient: BamlStreamClient;
  private httpRequest: AsyncHttpRequest;
  private httpStreamRequest: AsyncHttpStreamRequest;
  private llmResponseParser: LlmResponseParser;
  private llmStreamParser: LlmStreamParser;
  private bamlOptions: BamlCallOptions;

  constructor(
    runtime: BamlRuntime,
    ctxManager: BamlCtxManager,
    bamlOptions?: BamlCallOptions,
  ) {
    this.runtime = runtime;
    this.ctxManager = ctxManager;
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions);
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager);
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager);
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager);
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager);
    this.bamlOptions = bamlOptions || {};
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions);
  }

  get stream() {
    return this.streamClient;
  }

  get request() {
    return this.httpRequest;
  }

  get streamRequest() {
    return this.httpStreamRequest;
  }

  get parse() {
    return this.llmResponseParser;
  }

  get parseStream() {
    return this.llmStreamParser;
  }

  async AnalysisHierachy(
    currentParagraph: string,
    outline: types.BamlMdOutline[],
    endLevel: number,
    __baml_options__?: BamlCallOptions,
  ): Promise<number> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AnalysisHierachy(
          currentParagraph,
          outline,
          endLevel,
          __baml_options__,
        );

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'AnalysisHierachy',
        {
          currentParagraph: currentParagraph,
          outline: outline,
          endLevel: endLevel,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as number;
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async ExtractMainEntity(
    text: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<types.EntityExtractResult> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.ExtractMainEntity(text, __baml_options__);

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'ExtractMainEntity',
        {
          text: text,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as types.EntityExtractResult;
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async ExtractScopes(
    main_entity: string,
    text: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<types.ScopeExtractResult[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.ExtractScopes(
          main_entity,
          text,
          __baml_options__,
        );

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'ExtractScopes',
        {
          main_entity: main_entity,
          text: text,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as types.ScopeExtractResult[];
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async GenerateWikiSearchPattern(
    query: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<types.WikiSearchParamsBaml> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateWikiSearchPattern(
          query,
          __baml_options__,
        );

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'GenerateWikiSearchPattern',
        {
          query: query,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as types.WikiSearchParamsBaml;
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async Generate_plain_definition(
    entity_name: string,
    desc_information: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<types.Entity_Plain_Definition> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.Generate_plain_definition(
          entity_name,
          desc_information,
          __baml_options__,
        );

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'Generate_plain_definition',
        {
          entity_name: entity_name,
          desc_information: desc_information,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as types.Entity_Plain_Definition;
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async Research(
    arg: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.Research(arg, __baml_options__);

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'Research',
        {
          arg: arg,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as string;
    } catch (error) {
      throw toBamlError(error);
    }
  }

  async SummarizeWikiResults(
    query: string,
    search_results: string,
    __baml_options__?: BamlCallOptions,
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.SummarizeWikiResults(
          query,
          search_results,
          __baml_options__,
        );

        return await stream.getFinalResponse();
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = await this.runtime.callFunction(
        'SummarizeWikiResults',
        {
          query: query,
          search_results: search_results,
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      );
      return raw.parsed(false) as string;
    } catch (error) {
      throw toBamlError(error);
    }
  }
}

class BamlStreamClient {
  private runtime: BamlRuntime;
  private ctxManager: BamlCtxManager;
  private bamlOptions: BamlCallOptions;

  constructor(
    runtime: BamlRuntime,
    ctxManager: BamlCtxManager,
    bamlOptions?: BamlCallOptions,
  ) {
    this.runtime = runtime;
    this.ctxManager = ctxManager;
    this.bamlOptions = bamlOptions || {};
  }

  AnalysisHierachy(
    currentParagraph: string,
    outline: types.BamlMdOutline[],
    endLevel: number,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<number, number> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for AnalysisHierachy',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'AnalysisHierachy',
        {
          currentParagraph: currentParagraph,
          outline: outline,
          endLevel: endLevel,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<number, number>(
        raw,
        (a): number => a,
        (a): number => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  ExtractMainEntity(
    text: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<partial_types.EntityExtractResult, types.EntityExtractResult> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for ExtractMainEntity',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'ExtractMainEntity',
        {
          text: text,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<
        partial_types.EntityExtractResult,
        types.EntityExtractResult
      >(
        raw,
        (a): partial_types.EntityExtractResult => a,
        (a): types.EntityExtractResult => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  ExtractScopes(
    main_entity: string,
    text: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<
    partial_types.ScopeExtractResult[],
    types.ScopeExtractResult[]
  > {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for ExtractScopes',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'ExtractScopes',
        {
          main_entity: main_entity,
          text: text,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<
        partial_types.ScopeExtractResult[],
        types.ScopeExtractResult[]
      >(
        raw,
        (a): partial_types.ScopeExtractResult[] => a,
        (a): types.ScopeExtractResult[] => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  GenerateWikiSearchPattern(
    query: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<
    partial_types.WikiSearchParamsBaml,
    types.WikiSearchParamsBaml
  > {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for GenerateWikiSearchPattern',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'GenerateWikiSearchPattern',
        {
          query: query,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<
        partial_types.WikiSearchParamsBaml,
        types.WikiSearchParamsBaml
      >(
        raw,
        (a): partial_types.WikiSearchParamsBaml => a,
        (a): types.WikiSearchParamsBaml => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  Generate_plain_definition(
    entity_name: string,
    desc_information: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<
    partial_types.Entity_Plain_Definition,
    types.Entity_Plain_Definition
  > {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for Generate_plain_definition',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'Generate_plain_definition',
        {
          entity_name: entity_name,
          desc_information: desc_information,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<
        partial_types.Entity_Plain_Definition,
        types.Entity_Plain_Definition
      >(
        raw,
        (a): partial_types.Entity_Plain_Definition => a,
        (a): types.Entity_Plain_Definition => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  Research(
    arg: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error('Error in onTick callback for Research', error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'Research',
        {
          arg: arg,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }

  SummarizeWikiResults(
    query: string,
    search_results: string,
    __baml_options__?: BamlCallOptions,
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];

      let onTickWrapper: (() => void) | undefined;

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector('on-tick-collector');
        collector = [...collector, tickCollector];

        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!('Unknown', log);
            } catch (error) {
              console.error(
                'Error in onTick callback for SummarizeWikiResults',
                error,
              );
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.streamFunction(
        'SummarizeWikiResults',
        {
          query: query,
          search_results: search_results,
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper,
      );
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      );
    } catch (error) {
      throw toBamlError(error);
    }
  }
}

export const b = new BamlAsyncClient(
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
);
