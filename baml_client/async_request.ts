/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog } from
"@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {EntityExtractResult, Entity_Plain_Definition, ScopeExtractResult, WikiSearchParamsBaml} from "./types"
import type TypeBuilder from "./type_builder"

type TickReason = "Unknown";

type BamlCallOptions = {
tb?: TypeBuilder
clientRegistry?: ClientRegistry
env?: Record<string, string | undefined>
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
  }

  export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async ExtractMainEntity(
  text: string,
  __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ExtractMainEntity",
      {
      "text": text
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ExtractScopes(
  main_entity: string,text: string,
  __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ExtractScopes",
      {
      "main_entity": main_entity,"text": text
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateWikiSearchPattern(
  query: string,
  __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateWikiSearchPattern",
      {
      "query": query
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async Generate_plain_definition(
  entity_name: string,desc_information: string,
  __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "Generate_plain_definition",
      {
      "entity_name": entity_name,"desc_information": desc_information
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async Research(
  arg: string,
  __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "Research",
      {
      "arg": arg
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
      }

      export class AsyncHttpStreamRequest {
      constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

      
      async ExtractMainEntity(
      text: string,
      __baml_options__?: BamlCallOptions
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ExtractMainEntity",
          {
          "text": text
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ExtractScopes(
      main_entity: string,text: string,
      __baml_options__?: BamlCallOptions
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ExtractScopes",
          {
          "main_entity": main_entity,"text": text
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateWikiSearchPattern(
      query: string,
      __baml_options__?: BamlCallOptions
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateWikiSearchPattern",
          {
          "query": query
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async Generate_plain_definition(
      entity_name: string,desc_information: string,
      __baml_options__?: BamlCallOptions
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "Generate_plain_definition",
          {
          "entity_name": entity_name,"desc_information": desc_information
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async Research(
      arg: string,
      __baml_options__?: BamlCallOptions
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "Research",
          {
          "arg": arg
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
          }